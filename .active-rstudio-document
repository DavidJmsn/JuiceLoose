# RETRIEVE ESPN SPORTS SCHEDULE WITH WIN PROBABILITIES --------------------
# Purpose: Retrieve game schedules and win probabilities for NBA, NFL, MLB from ESPN
# Author: Adapted from original scripts
# Last Updated: 2025-06-02

# SETUP -------------------------------------------------------------------

# Suppress startup messages
suppressPackageStartupMessages({
  library(httr)
  library(jsonlite)
  library(dplyr)
  library(lubridate)
  library(stringr)
  library(purrr)
})

# CONFIGURATION -----------------------------------------------------------

config <- list(
  base_url = "http://sports.core.api.espn.com/v2/sports",
  max_retries = 3,
  retry_delay = 2,  # seconds
  timeout = 30,     # seconds
  output_dir = "data",
  log_file = "espn_schedule_retrieval.log",
  
  # Sport-specific configurations
  sports = list(
    NBA = list(
      path = "basketball/leagues/nba",
      season_type = "regular",
      has_predictor = TRUE
    ),
    NFL = list(
      path = "football/leagues/nfl", 
      season_type = "regular",
      has_predictor = TRUE
    ),
    MLB = list(
      path = "baseball/leagues/mlb",
      season_type = "regular", 
      has_predictor = TRUE
    )
  )
)

# LOGGING FUNCTIONS -------------------------------------------------------

log_message <- function(message, level = "INFO", sport = NULL) {
  timestamp <- format(Sys.time(), format = "%Y-%m-%d %H:%M:%S")
  log_entry <- sprintf("[%s] %s: %s", timestamp, level, message)
  
  # Print to console
  if (level == "ERROR") {
    message(log_entry)
  } else {
    cat(log_entry, "\n")
  }
  
  # Write to log file - use sport-specific directory if available
  if (!is.null(sport)) {
    log_dir <- file.path(config$output_dir, tolower(sport), "win_probability")
    if (!dir.exists(log_dir)) {
      dir.create(log_dir, showWarnings = FALSE, recursive = TRUE)
    }
    log_path <- file.path(log_dir, config$log_file)
  } else {
    log_path <- file.path(config$output_dir, config$log_file)
  }
  cat(log_entry, "\n", file = log_path, append = TRUE)
}

# API FUNCTIONS WITH RETRY LOGIC ------------------------------------------

#' Make API request with retry logic
#' @param url Full URL for the API request
#' @param max_retries Maximum number of retry attempts
#' @return Parsed JSON response or NULL on failure
api_request <- function(url, max_retries = config$max_retries) {
  
  for (attempt in 1:max_retries) {
    tryCatch({
      response <- GET(
        url,
        timeout(config$timeout),
        add_headers("Accept" = "application/json")
      )
      
      if (status_code(response) == 200) {
        return(fromJSON(content(response, "text", encoding = "UTF-8")))
      } else if (status_code(response) %in% c(429, 500, 502, 503, 504)) {
        # Retryable errors
        if (attempt < max_retries) {
          log_message(sprintf("API request failed (attempt %d/%d): Status %d. Retrying...", 
                              attempt, max_retries, status_code(response)), "WARN")
          Sys.sleep(config$retry_delay * attempt)  # Exponential backoff
        }
      } else {
        # Non-retryable error
        log_message(sprintf("API request failed: Status %d", status_code(response)), "ERROR")
        return(NULL)
      }
    }, error = function(e) {
      log_message(sprintf("API request error (attempt %d/%d): %s", 
                          attempt, max_retries, e$message), "WARN")
      if (attempt < max_retries) {
        Sys.sleep(config$retry_delay * attempt)
      }
    })
  }
  
  log_message("API request failed after all retries", "ERROR")
  return(NULL)
}

# ESPN-SPECIFIC FUNCTIONS -------------------------------------------------

#' Get ESPN events for a specific sport and date
#' @param sport Sport name (NBA, NFL, MLB)
#' @param date Date in YYYY-MM-DD format or Date object
#' @return Events data or NULL on failure
get_espn_events <- function(sport = "NBA", date = Sys.Date()) {
  if (!sport %in% names(config$sports)) {
    log_message(sprintf("Unsupported sport: %s", sport), "ERROR", sport)
    return(NULL)
  }
  
  # Ensure date is in correct format
  if (is.character(date)) {
    date <- as.Date(date)
  }
  
  date_str <- format(date, format = "%Y%m%d")
  sport_config <- config$sports[[sport]]
  
  url <- sprintf("%s/%s/events?lang=en&region=us&dates=%s",
                 config$base_url, sport_config$path, date_str)
  
  log_message(sprintf("Fetching %s events for %s", sport, format(date, "%Y-%m-%d")), "INFO", sport)
  
  api_request(url)
}

#' Get win probabilities and odds for a specific event
#' @param event_url Event URL from ESPN API
#' @param sport Sport name
#' @return List with predictor and odds data
get_event_probabilities <- function(event_url, sport = "NBA") {
  # Extract game ID from event URL
  game_id <- gsub('[\\/?]', '', str_extract(event_url, '\\/[0-9]+\\?'))
  
  # Remove query parameters from event URL
  base_event_url <- sub('\\?lang.*', '', event_url)
  
  # Construct URLs
  predictor_url <- sprintf("%s/competitions/%s/predictor?lang=en&region=us",
                           base_event_url, game_id)
  odds_url <- sprintf("%s/competitions/%s/odds?lang=en&region=us",
                      base_event_url, game_id)
  
  result <- list()
  
  # Get predictor data (if available for the sport)
  if (config$sports[[sport]]$has_predictor) {
    predictor_data <- api_request(predictor_url)
    if (!is.null(predictor_data)) {
      result$predictor <- predictor_data
    }
  }
  
  # Get odds data
  odds_data <- api_request(odds_url)
  if (!is.null(odds_data)) {
    result$odds <- odds_data
  }
  
  return(result)
}

#' Get detailed event information
#' @param event_url Event URL from ESPN API
#' @return Detailed event data
get_event_details <- function(event_url) {
  api_request(event_url)
}

#' Parse game information from event data
#' @param event_data Event data from ESPN API
#' @param prob_data Probability data (predictor and odds)
#' @param sport Sport name
#' @return Data frame with game information
parse_game_info <- function(event_data, prob_data = NULL, sport = "NBA") {
  if (is.null(event_data) || is.null(event_data$competitions)) {
    return(NULL)
  }
  
  # Get competition data - handle case where it might be a reference
  comp <- event_data$competitions[[1]]
  
  # If competition is a reference, fetch the actual data
  if (is.character(comp) || (is.list(comp) && length(comp) == 1 && !is.null(comp# RETRIEVE ESPN SPORTS SCHEDULE WITH WIN PROBABILITIES --------------------
                                                                            # Purpose: Retrieve game schedules and win probabilities for NBA, NFL, MLB from ESPN
                                                                            # Author: Adapted from original scripts
                                                                            # Last Updated: 2025-06-02
                                                                            
                                                                            # SETUP -------------------------------------------------------------------
                                                                            
                                                                            # Suppress startup messages
                                                                            suppressPackageStartupMessages({
                                                                              library(httr)
                                                                              library(jsonlite)
                                                                              library(dplyr)
                                                                              library(lubridate)
                                                                              library(stringr)
                                                                              library(purrr)
                                                                            })
                                                                            
                                                                            # CONFIGURATION -----------------------------------------------------------
                                                                            
                                                                            config <- list(
                                                                              base_url = "http://sports.core.api.espn.com/v2/sports",
                                                                              max_retries = 3,
                                                                              retry_delay = 2,  # seconds
                                                                              timeout = 30,     # seconds
                                                                              output_dir = "data",
                                                                              log_file = "espn_schedule_retrieval.log",
                                                                              
                                                                              # Sport-specific configurations
                                                                              sports = list(
                                                                                NBA = list(
                                                                                  path = "basketball/leagues/nba",
                                                                                  season_type = "regular",
                                                                                  has_predictor = TRUE
                                                                                ),
                                                                                NFL = list(
                                                                                  path = "football/leagues/nfl", 
                                                                                  season_type = "regular",
                                                                                  has_predictor = TRUE
                                                                                ),
                                                                                MLB = list(
                                                                                  path = "baseball/leagues/mlb",
                                                                                  season_type = "regular", 
                                                                                  has_predictor = TRUE
                                                                                )
                                                                              )
                                                                            )
                                                                            
                                                                            # LOGGING FUNCTIONS -------------------------------------------------------
                                                                            
                                                                            log_message <- function(message, level = "INFO", sport = NULL) {
                                                                              timestamp <- format(Sys.time(), format = "%Y-%m-%d %H:%M:%S")
                                                                              log_entry <- sprintf("[%s] %s: %s", timestamp, level, message)
                                                                              
                                                                              # Print to console
                                                                              if (level == "ERROR") {
                                                                                message(log_entry)
                                                                              } else {
                                                                                cat(log_entry, "\n")
                                                                              }
                                                                              
                                                                              # Write to log file - use sport-specific directory if available
                                                                              if (!is.null(sport)) {
                                                                                log_dir <- file.path(config$output_dir, tolower(sport), "win_probability")
                                                                                if (!dir.exists(log_dir)) {
                                                                                  dir.create(log_dir, showWarnings = FALSE, recursive = TRUE)
                                                                                }
                                                                                log_path <- file.path(log_dir, config$log_file)
                                                                              } else {
                                                                                log_path <- file.path(config$output_dir, config$log_file)
                                                                              }
                                                                              cat(log_entry, "\n", file = log_path, append = TRUE)
                                                                            }
                                                                            
                                                                            # API FUNCTIONS WITH RETRY LOGIC ------------------------------------------
                                                                            
                                                                            #' Make API request with retry logic
                                                                            #' @param url Full URL for the API request
                                                                            #' @param max_retries Maximum number of retry attempts
                                                                            #' @return Parsed JSON response or NULL on failure
                                                                            api_request <- function(url, max_retries = config$max_retries) {
                                                                              
                                                                              for (attempt in 1:max_retries) {
                                                                                tryCatch({
                                                                                  response <- GET(
                                                                                    url,
                                                                                    timeout(config$timeout),
                                                                                    add_headers("Accept" = "application/json")
                                                                                  )
                                                                                  
                                                                                  if (status_code(response) == 200) {
                                                                                    return(fromJSON(content(response, "text", encoding = "UTF-8")))
                                                                                  } else if (status_code(response) %in% c(429, 500, 502, 503, 504)) {
                                                                                    # Retryable errors
                                                                                    if (attempt < max_retries) {
                                                                                      log_message(sprintf("API request failed (attempt %d/%d): Status %d. Retrying...", 
                                                                                                          attempt, max_retries, status_code(response)), "WARN")
                                                                                      Sys.sleep(config$retry_delay * attempt)  # Exponential backoff
                                                                                    }
                                                                                  } else {
                                                                                    # Non-retryable error
                                                                                    log_message(sprintf("API request failed: Status %d", status_code(response)), "ERROR")
                                                                                    return(NULL)
                                                                                  }
                                                                                }, error = function(e) {
                                                                                  log_message(sprintf("API request error (attempt %d/%d): %s", 
                                                                                                      attempt, max_retries, e$message), "WARN")
                                                                                  if (attempt < max_retries) {
                                                                                    Sys.sleep(config$retry_delay * attempt)
                                                                                  }
                                                                                })
                                                                              }
                                                                              
                                                                              log_message("API request failed after all retries", "ERROR")
                                                                              return(NULL)
                                                                            }
                                                                            
                                                                            # ESPN-SPECIFIC FUNCTIONS -------------------------------------------------
                                                                            
                                                                            #' Get ESPN events for a specific sport and date
                                                                            #' @param sport Sport name (NBA, NFL, MLB)
                                                                            #' @param date Date in YYYY-MM-DD format or Date object
                                                                            #' @return Events data or NULL on failure
                                                                            get_espn_events <- function(sport = "NBA", date = Sys.Date()) {
                                                                              if (!sport %in% names(config$sports)) {
                                                                                log_message(sprintf("Unsupported sport: %s", sport), "ERROR", sport)
                                                                                return(NULL)
                                                                              }
                                                                              
                                                                              # Ensure date is in correct format
                                                                              if (is.character(date)) {
                                                                                date <- as.Date(date)
                                                                              }
                                                                              
                                                                              date_str <- format(date, format = "%Y%m%d")
                                                                              sport_config <- config$sports[[sport]]
                                                                              
                                                                              url <- sprintf("%s/%s/events?lang=en&region=us&dates=%s",
                                                                                             config$base_url, sport_config$path, date_str)
                                                                              
                                                                              log_message(sprintf("Fetching %s events for %s", sport, format(date, "%Y-%m-%d")), "INFO", sport)
                                                                              
                                                                              api_request(url)
                                                                            }
                                                                            
                                                                            #' Get win probabilities and odds for a specific event
                                                                            #' @param event_url Event URL from ESPN API
                                                                            #' @param sport Sport name
                                                                            #' @return List with predictor and odds data
                                                                            get_event_probabilities <- function(event_url, sport = "NBA") {
                                                                              # Extract game ID from event URL
                                                                              game_id <- gsub('[\\/?]', '', str_extract(event_url, '\\/[0-9]+\\?'))
                                                                              
                                                                              # Remove query parameters from event URL
                                                                              base_event_url <- sub('\\?lang.*', '', event_url)
                                                                              
                                                                              # Construct URLs
                                                                              predictor_url <- sprintf("%s/competitions/%s/predictor?lang=en&region=us",
                                                                                                       base_event_url, game_id)
                                                                              odds_url <- sprintf("%s/competitions/%s/odds?lang=en&region=us",
                                                                                                  base_event_url, game_id)
                                                                              
                                                                              result <- list()
                                                                              
                                                                              # Get predictor data (if available for the sport)
                                                                              if (config$sports[[sport]]$has_predictor) {
                                                                                predictor_data <- api_request(predictor_url)
                                                                                if (!is.null(predictor_data)) {
                                                                                  result$predictor <- predictor_data
                                                                                }
                                                                              }
                                                                              
                                                                              # Get odds data
                                                                              odds_data <- api_request(odds_url)
                                                                              if (!is.null(odds_data)) {
                                                                                result$odds <- odds_data
                                                                              }
                                                                              
                                                                              return(result)
                                                                            }
                                                                            
                                                                            #' Get detailed event information
                                                                            #' @param event_url Event URL from ESPN API
                                                                            #' @return Detailed event data
                                                                            get_event_details <- function(event_url) {
                                                                              api_request(event_url)
                                                                            }
                                                                            
                                                                            $ref`))) {
    comp_url <- ifelse(is.character(comp), comp, comp# RETRIEVE ESPN SPORTS SCHEDULE WITH WIN PROBABILITIES --------------------
                       # Purpose: Retrieve game schedules and win probabilities for NBA, NFL, MLB from ESPN
                       # Author: Adapted from original scripts
                       # Last Updated: 2025-06-02
                       
                       # SETUP -------------------------------------------------------------------
                       
                       # Suppress startup messages
                       suppressPackageStartupMessages({
                         library(httr)
                         library(jsonlite)
                         library(dplyr)
                         library(lubridate)
                         library(stringr)
                         library(purrr)
                       })
                       
                       # CONFIGURATION -----------------------------------------------------------
                       
                       config <- list(
                         base_url = "http://sports.core.api.espn.com/v2/sports",
                         max_retries = 3,
                         retry_delay = 2,  # seconds
                         timeout = 30,     # seconds
                         output_dir = "data",
                         log_file = "espn_schedule_retrieval.log",
                         
                         # Sport-specific configurations
                         sports = list(
                           NBA = list(
                             path = "basketball/leagues/nba",
                             season_type = "regular",
                             has_predictor = TRUE
                           ),
                           NFL = list(
                             path = "football/leagues/nfl", 
                             season_type = "regular",
                             has_predictor = TRUE
                           ),
                           MLB = list(
                             path = "baseball/leagues/mlb",
                             season_type = "regular", 
                             has_predictor = TRUE
                           )
                         )
                       )
                       
                       # LOGGING FUNCTIONS -------------------------------------------------------
                       
                       log_message <- function(message, level = "INFO", sport = NULL) {
                         timestamp <- format(Sys.time(), format = "%Y-%m-%d %H:%M:%S")
                         log_entry <- sprintf("[%s] %s: %s", timestamp, level, message)
                         
                         # Print to console
                         if (level == "ERROR") {
                           message(log_entry)
                         } else {
                           cat(log_entry, "\n")
                         }
                         
                         # Write to log file - use sport-specific directory if available
                         if (!is.null(sport)) {
                           log_dir <- file.path(config$output_dir, tolower(sport), "win_probability")
                           if (!dir.exists(log_dir)) {
                             dir.create(log_dir, showWarnings = FALSE, recursive = TRUE)
                           }
                           log_path <- file.path(log_dir, config$log_file)
                         } else {
                           log_path <- file.path(config$output_dir, config$log_file)
                         }
                         cat(log_entry, "\n", file = log_path, append = TRUE)
                       }
                       
                       # API FUNCTIONS WITH RETRY LOGIC ------------------------------------------
                       
                       #' Make API request with retry logic
                       #' @param url Full URL for the API request
                       #' @param max_retries Maximum number of retry attempts
                       #' @return Parsed JSON response or NULL on failure
                       api_request <- function(url, max_retries = config$max_retries) {
                         
                         for (attempt in 1:max_retries) {
                           tryCatch({
                             response <- GET(
                               url,
                               timeout(config$timeout),
                               add_headers("Accept" = "application/json")
                             )
                             
                             if (status_code(response) == 200) {
                               return(fromJSON(content(response, "text", encoding = "UTF-8")))
                             } else if (status_code(response) %in% c(429, 500, 502, 503, 504)) {
                               # Retryable errors
                               if (attempt < max_retries) {
                                 log_message(sprintf("API request failed (attempt %d/%d): Status %d. Retrying...", 
                                                     attempt, max_retries, status_code(response)), "WARN")
                                 Sys.sleep(config$retry_delay * attempt)  # Exponential backoff
                               }
                             } else {
                               # Non-retryable error
                               log_message(sprintf("API request failed: Status %d", status_code(response)), "ERROR")
                               return(NULL)
                             }
                           }, error = function(e) {
                             log_message(sprintf("API request error (attempt %d/%d): %s", 
                                                 attempt, max_retries, e$message), "WARN")
                             if (attempt < max_retries) {
                               Sys.sleep(config$retry_delay * attempt)
                             }
                           })
                         }
                         
                         log_message("API request failed after all retries", "ERROR")
                         return(NULL)
                       }
                       
                       # ESPN-SPECIFIC FUNCTIONS -------------------------------------------------
                       
                       #' Get ESPN events for a specific sport and date
                       #' @param sport Sport name (NBA, NFL, MLB)
                       #' @param date Date in YYYY-MM-DD format or Date object
                       #' @return Events data or NULL on failure
                       get_espn_events <- function(sport = "NBA", date = Sys.Date()) {
                         if (!sport %in% names(config$sports)) {
                           log_message(sprintf("Unsupported sport: %s", sport), "ERROR", sport)
                           return(NULL)
                         }
                         
                         # Ensure date is in correct format
                         if (is.character(date)) {
                           date <- as.Date(date)
                         }
                         
                         date_str <- format(date, format = "%Y%m%d")
                         sport_config <- config$sports[[sport]]
                         
                         url <- sprintf("%s/%s/events?lang=en&region=us&dates=%s",
                                        config$base_url, sport_config$path, date_str)
                         
                         log_message(sprintf("Fetching %s events for %s", sport, format(date, "%Y-%m-%d")), "INFO", sport)
                         
                         api_request(url)
                       }
                       
                       #' Get win probabilities and odds for a specific event
                       #' @param event_url Event URL from ESPN API
                       #' @param sport Sport name
                       #' @return List with predictor and odds data
                       get_event_probabilities <- function(event_url, sport = "NBA") {
                         # Extract game ID from event URL
                         game_id <- gsub('[\\/?]', '', str_extract(event_url, '\\/[0-9]+\\?'))
                         
                         # Remove query parameters from event URL
                         base_event_url <- sub('\\?lang.*', '', event_url)
                         
                         # Construct URLs
                         predictor_url <- sprintf("%s/competitions/%s/predictor?lang=en&region=us",
                                                  base_event_url, game_id)
                         odds_url <- sprintf("%s/competitions/%s/odds?lang=en&region=us",
                                             base_event_url, game_id)
                         
                         result <- list()
                         
                         # Get predictor data (if available for the sport)
                         if (config$sports[[sport]]$has_predictor) {
                           predictor_data <- api_request(predictor_url)
                           if (!is.null(predictor_data)) {
                             result$predictor <- predictor_data
                           }
                         }
                         
                         # Get odds data
                         odds_data <- api_request(odds_url)
                         if (!is.null(odds_data)) {
                           result$odds <- odds_data
                         }
                         
                         return(result)
                       }
                       
                       #' Get detailed event information
                       #' @param event_url Event URL from ESPN API
                       #' @return Detailed event data
                       get_event_details <- function(event_url) {
                         api_request(event_url)
                       }
                       
                       $ref`)
    comp <- api_request(comp_url)
    if (is.null(comp)) {
      log_message("Failed to fetch competition details", "WARN", sport)
      return(NULL)
    }
  }
  
  # Extract basic game information
  game_info <- data.frame(
    game_id = event_data$id,
    sport = sport,
    date = as.POSIXct(event_data$date, format = "%Y-%m-%dT%H:%MZ", tz = "UTC"),
    name = event_data$name,
    short_name = event_data$shortName,
    season_type = ifelse(!is.null(event_data$seasonType$type), 
                         event_data$seasonType$type, NA),
    stringsAsFactors = FALSE
  )
  
  # Add venue information
  if (!is.null(comp$venue)) {
    game_info$venue <- comp$venue$fullName
    game_info$venue_city <- comp$venue$address$city
    game_info$venue_state <- comp$venue$address$state
  }
  
  # Extract team information
  if (!is.null(comp$competitors) && length(comp$competitors) >= 2) {
    home_team <- comp$competitors[[1]]
    away_team <- comp$competitors[[2]]
    
    # Ensure we have the correct home/away assignment
    if (home_team$homeAway == "away") {
      temp <- home_team
      home_team <- away_team
      away_team <- temp
    }
    
    game_info$home_team_id <- home_team$id
    game_info$away_team_id <- away_team$id
  }
  
  # Add win probabilities if available
  if (!is.null(prob_data$predictor)) {
    predictor <- prob_data$predictor
    
    if (!is.null(predictor$homeTeam$statistics)) {
      home_stats <- predictor$homeTeam$statistics
      home_win_prob_idx <- which(home_stats$name == "winProbability")
      if (length(home_win_prob_idx) > 0) {
        game_info$home_win_prob <- as.numeric(home_stats$value[home_win_prob_idx])
      }
    }
    
    if (!is.null(predictor$awayTeam$statistics)) {
      away_stats <- predictor$awayTeam$statistics
      away_win_prob_idx <- which(away_stats$name == "winProbability")
      if (length(away_win_prob_idx) > 0) {
        game_info$away_win_prob <- as.numeric(away_stats$value[away_win_prob_idx])
      }
    }
    
    # Add predicted scores if available
    if (!is.null(predictor$homeTeam$scores)) {
      game_info$home_predicted_score <- predictor$homeTeam$scores$value
    }
    if (!is.null(predictor$awayTeam$scores)) {
      game_info$away_predicted_score <- predictor$awayTeam$scores$value
    }
  }
  
  # Add odds information if available
  if (!is.null(prob_data$odds) && !is.null(prob_data$odds$items)) {
    # Get the first available odds
    if (length(prob_data$odds$items) > 0) {
      first_odds <- prob_data$odds$items[[1]]
      
      if (!is.null(first_odds$spread)) {
        game_info$spread <- first_odds$spread
        game_info$spread_odds <- first_odds$spreadOdds
      }
      
      if (!is.null(first_odds$overUnder)) {
        game_info$over_under <- first_odds$overUnder
      }
      
      game_info$odds_provider <- first_odds$provider$name
    }
  }
  
  # Add sport-specific information
  game_info <- add_sport_specific_info(game_info, event_data, sport)
  
  return(game_info)
}

# MAIN EXECUTION FUNCTION -------------------------------------------------

#' Retrieve ESPN schedule with win probabilities for specified sport and dates
#' @param sport Sport to retrieve (NBA, NFL, MLB)
#' @param dates Date or vector of dates to retrieve schedules for
#' @param include_probabilities Whether to fetch win probability data
#' @return Data frame with all games and probabilities
#' @examples
#' # Get today's NBA games with probabilities
#' retrieve_espn_schedule("NBA")
#' 
#' # Get NFL games for next week
#' retrieve_espn_schedule("NFL", Sys.Date() + 0:7)
#' 
#' # Get MLB games without probabilities (faster)
#' retrieve_espn_schedule("MLB", include_probabilities = FALSE)
retrieve_espn_schedule <- function(sport = "NBA", 
                                   dates = NULL, 
                                   include_probabilities = TRUE) {
  
  # Validate sport
  if (!sport %in% names(config$sports)) {
    log_message(sprintf("Invalid sport: %s. Choose from: %s", 
                        sport, paste(names(config$sports), collapse = ", ")), "ERROR", sport)
    return(NULL)
  }
  
  # Create sport-specific output directory
  sport_output_dir <- file.path(config$output_dir, tolower(sport), "win_probability")
  dir.create(sport_output_dir, showWarnings = FALSE, recursive = TRUE)
  
  # Default to today and tomorrow if no dates provided
  if (is.null(dates)) {
    dates <- c(Sys.Date(), Sys.Date() + 1)
    log_message(sprintf("No dates specified, retrieving %s schedule for today and tomorrow", sport), "INFO", sport)
  } else {
    # Convert character dates to Date objects
    if (is.character(dates)) {
      dates <- as.Date(dates)
    }
    dates <- as.Date(dates)
  }
  
  # Remove duplicate dates and sort
  dates <- sort(unique(dates))
  
  log_message(sprintf("Starting %s schedule retrieval for %d date(s): %s", 
                      sport,
                      length(dates), 
                      paste(format(dates, format = "%Y-%m-%d"), collapse = ", ")), "INFO", sport)
  
  # Initialize list to store games
  all_games_list <- list()
  
  # Process each date
  for (i in seq_along(dates)) {
    current_date <- dates[i]
    
    # Get events for this date
    events_data <- get_espn_events(sport, current_date)
    
    if (is.null(events_data) || events_data$count == 0) {
      log_message(sprintf("No %s events found for %s", 
                          sport, format(current_date, "%Y-%m-%d")), "INFO", sport)
      next
    }
    
    log_message(sprintf("Found %d %s events for %s", 
                        events_data$count, sport, format(current_date, "%Y-%m-%d")), "INFO", sport)
    
    # Process each event
    # Handle different possible structures of items
    if (is.data.frame(events_data$items)) {
      # If items is a data frame with a $ref column
      event_urls <- events_data$items$`$ref`
    } else if (is.list(events_data$items)) {
      # If items is a list, extract URLs
      event_urls <- sapply(events_data$items, function(x) {
        if (is.list(x) && !is.null(x$`$ref`)) {
          return(x$`$ref`)
        } else if (is.character(x)) {
          return(x)
        } else {
          return(NA)
        }
      })
      event_urls <- event_urls[!is.na(event_urls)]
    } else {
      # If items is a simple vector
      event_urls <- events_data$items
    }
    
    # Process each event URL
    for (j in seq_along(event_urls)) {
      event_url <- event_urls[j]
      
      # Ensure we have a valid URL string
      if (!is.character(event_url) || length(event_url) == 0 || is.na(event_url)) {
        log_message(sprintf("Invalid event URL format at index %d", j), "WARN", sport)
        next
      }
      
      # Get detailed event information
      event_details <- get_event_details(event_url)
      
      if (is.null(event_details)) {
        log_message(sprintf("Failed to get details for event: %s", event_url), "WARN", sport)
        next
      }
      
      # Debug: Print structure of event details (remove this in production)
      if (j == 1) {  # Only print for first event to avoid clutter
        log_message(sprintf("Event structure - competitions class: %s, length: %d", 
                            class(event_details$competitions)[1], 
                            length(event_details$competitions)), "DEBUG", sport)
        if (!is.null(event_details$competitions) && length(event_details$competitions) > 0) {
          log_message(sprintf("First competition class: %s", 
                              class(event_details$competitions[[1]])[1]), "DEBUG", sport)
        }
      }
      
      # Get probabilities if requested
      prob_data <- NULL
      if (include_probabilities) {
        prob_data <- get_event_probabilities(event_url, sport)
      }
      
      # Parse game information
      game_info <- parse_game_info(event_details, prob_data, sport)
      
      if (!is.null(game_info)) {
        all_games_list[[length(all_games_list) + 1]] <- game_info
      }
    }
  }
  
  # Combine all games
  all_games <- bind_rows(all_games_list)
  
  if (is.null(all_games) || nrow(all_games) == 0) {
    log_message(sprintf("No %s games found for any of the specified dates", sport), "WARN", sport)
    return(invisible(NULL))
  }
  
  log_message(sprintf("Successfully retrieved %d %s games", nrow(all_games), sport), "INFO", sport)
  
  # Sort by date
  all_games <- all_games %>%
    arrange(date)
  
  # Create filename
  if (length(dates) == 1) {
    date_suffix <- format(dates[1], format = "%Y-%m-%d")
  } else {
    date_suffix <- sprintf("%s_to_%s", 
                           format(min(dates), format = "%Y-%m-%d"),
                           format(max(dates), format = "%Y-%m-%d"))
  }
  
  filename <- sprintf("%s_%s_games_%s.csv",
                      format(Sys.time(), format = "%Y%m%d_%H%M%S"),
                      tolower(sport),
                      date_suffix)
  output_path <- file.path(sport_output_dir, filename)
  
  # Save to CSV
  write.csv(all_games, output_path, row.names = FALSE)
  log_message(sprintf("Schedule saved to: %s", output_path), "INFO", sport)
  
  # Summary statistics
  if (include_probabilities && "home_win_prob" %in% names(all_games)) {
    games_with_prob <- sum(!is.na(all_games$home_win_prob))
    log_message(sprintf("Win probabilities available for %d out of %d games", 
                        games_with_prob, nrow(all_games)), "INFO", sport)
  }
  
  # Return the data frame invisibly
  invisible(all_games)
}

# UTILITY FUNCTIONS -------------------------------------------------------

#' Get all games for multiple sports
#' @param sports Vector of sports to retrieve
#' @param dates Dates to retrieve
#' @param include_probabilities Whether to include win probabilities
#' @return List of data frames, one per sport
retrieve_multi_sport_schedule <- function(sports = c("NBA", "NFL", "MLB"),
                                          dates = NULL,
                                          include_probabilities = TRUE) {
  
  results <- list()
  
  for (sport in sports) {
    log_message(sprintf("\n--- Processing %s ---", sport), "INFO", sport)
    
    sport_data <- retrieve_espn_schedule(
      sport = sport,
      dates = dates,
      include_probabilities = include_probabilities
    )
    
    if (!is.null(sport_data)) {
      results[[sport]] <- sport_data
    }
  }
  
  return(results)
}

# Run the script with command line arguments if not interactive
if (!interactive()) {
  args <- commandArgs(trailingOnly = TRUE)
  
  if (length(args) == 0) {
    # Default to NBA if no arguments
    retrieve_espn_schedule("NBA")
  } else {
    sport <- toupper(args[1])
    
    # Check if dates were provided
    if (length(args) > 1) {
      dates <- as.Date(args[-1])
      retrieve_espn_schedule(sport, dates)
    } else {
      retrieve_espn_schedule(sport)
    }
  }
}
